From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sun, 31 Mar 2019 13:11:25 -0700
Subject: [PATCH] Guard collections against off-main access

This way people's servers don't crash unless they know why, and as such
can resolve the issue by nagging the appropriate developer.

diff --git a/src/main/java/com/tuinity/tuinity/util/PrimaryThreadList.java b/src/main/java/com/tuinity/tuinity/util/PrimaryThreadList.java
new file mode 100644
index 0000000000000000000000000000000000000000..de930aef9b65963aa1ce1fe3986323962a3d92d5
--- /dev/null
+++ b/src/main/java/com/tuinity/tuinity/util/PrimaryThreadList.java
@@ -0,0 +1,241 @@
+package com.tuinity.tuinity.util;
+
+import org.spigotmc.AsyncCatcher;
+
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.function.IntFunction;
+import java.util.function.Predicate;
+import java.util.function.UnaryOperator;
+import java.util.stream.Stream;
+
+public class PrimaryThreadList<E> implements List<E> {
+
+    protected final List<E> wrapped;
+
+    public PrimaryThreadList(final List<E> wrap) {
+        if (wrap == null) {
+            throw new NullPointerException("Wrapped list may not be null");
+        }
+
+        this.wrapped = wrap;
+    }
+
+    protected void check() {
+        AsyncCatcher.catchOp("collection access");
+    }
+
+    @Override
+    public boolean add(final E element) {
+        this.check();
+        return this.wrapped.add(element);
+    }
+
+    @Override
+    public void add(final int index, final E element) {
+        this.check();
+        this.wrapped.add(index, element);
+    }
+
+    @Override
+    public boolean addAll(final Collection<? extends E> collection) {
+        this.check();
+        return this.wrapped.addAll(collection);
+    }
+
+    @Override
+    public boolean addAll(final int index, final Collection<? extends E> collection) {
+        this.check();
+        return this.wrapped.addAll(index, collection);
+    }
+
+    @Override
+    public E set(final int index, final E element) {
+        this.check();
+        return this.wrapped.set(index, element);
+    }
+
+    @Override
+    public boolean remove(final Object element) {
+        this.check();
+        return this.wrapped.remove(element);
+    }
+
+    @Override
+    public E remove(final int index) {
+        this.check();
+        return this.wrapped.remove(index);
+    }
+
+    @Override
+    public boolean removeIf(final Predicate<? super E> filter) {
+        this.check();
+        return this.wrapped.removeIf(filter);
+    }
+
+    @Override
+    public boolean removeAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.removeAll(collection);
+    }
+
+    @Override
+    public boolean retainAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.retainAll(collection);
+    }
+
+    @Override
+    public void replaceAll(final UnaryOperator<E> operator) {
+        this.check();
+        this.wrapped.replaceAll(operator);
+    }
+
+    @Override
+    public void sort(final Comparator<? super E> comparator) {
+        this.check();
+        this.wrapped.sort(comparator);
+    }
+
+    @Override
+    public void clear() {
+        this.check();
+        this.wrapped.clear();
+    }
+
+    @Override
+    public int size() {
+        this.check();
+        return this.wrapped.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        this.check();
+        return this.wrapped.isEmpty();
+    }
+
+    @Override
+    public E get(final int index) {
+        this.check();
+        return this.wrapped.get(index);
+    }
+
+    @Override
+    public boolean containsAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.containsAll(collection);
+    }
+
+    @Override
+    public boolean contains(final Object object) {
+        this.check();
+        return this.wrapped.contains(object);
+    }
+
+    @Override
+    public int indexOf(final Object object) {
+        this.check();
+        return this.wrapped.indexOf(object);
+    }
+
+    @Override
+    public int lastIndexOf(final Object object) {
+        this.check();
+        return this.wrapped.lastIndexOf(object);
+    }
+
+    @Override
+    public void forEach(final Consumer<? super E> action) {
+        this.check();
+        this.wrapped.forEach(action);
+    }
+
+    @Override
+    public <T> T[] toArray(final T[] array) {
+        this.check();
+        return this.wrapped.toArray(array);
+    }
+
+    @Override
+    public <T> T[] toArray(final IntFunction<T[]> generator) {
+        this.check();
+        return this.wrapped.toArray(generator);
+    }
+
+    @Override
+    public Object[] toArray() {
+        this.check();
+        return this.wrapped.toArray();
+    }
+
+    @Override
+    public Iterator<E> iterator() {
+        this.check();
+        return this.wrapped.iterator();
+    }
+
+    @Override
+    public ListIterator<E> listIterator() {
+        this.check();
+        return this.wrapped.listIterator();
+    }
+
+    @Override
+    public ListIterator<E> listIterator(final int index) {
+        this.check();
+        return this.wrapped.listIterator(index);
+    }
+
+    @Override
+    public List<E> subList(final int fromIndex, final int toIndex) {
+        this.check();
+        return new PrimaryThreadList<>(this.wrapped.subList(fromIndex, toIndex));
+    }
+
+    @Override
+    public Stream<E> stream() {
+        this.check();
+        return this.wrapped.stream();
+    }
+
+    @Override
+    public Stream<E> parallelStream() {
+        this.check();
+        return this.wrapped.parallelStream();
+    }
+
+    @Override
+    public Spliterator<E> spliterator() {
+        this.check();
+        return this.wrapped.spliterator();
+    }
+
+    @Override
+    public String toString() {
+        this.check();
+        return this.wrapped.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        this.check();
+        return this.wrapped.hashCode();
+    }
+
+    @Override
+    public boolean equals(final Object object) {
+        this.check();
+        return this.wrapped.equals(object);
+    }
+
+    public static class RandomAccessPrimaryThreadList<E> extends PrimaryThreadList<E> implements RandomAccess {
+        public RandomAccessPrimaryThreadList(final List<E> wrap) {
+            super(wrap);
+        }
+    }
+
+    public static <E> PrimaryThreadList<E> of(final List<E> list) {
+        return list instanceof RandomAccess ? new RandomAccessPrimaryThreadList<>(list) : new PrimaryThreadList<>(list);
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/tuinity/tuinity/util/PrimaryThreadSet.java b/src/main/java/com/tuinity/tuinity/util/PrimaryThreadSet.java
new file mode 100644
index 0000000000000000000000000000000000000000..0249c78c1ac7acf6f6d5422d5ba7975621177f39
--- /dev/null
+++ b/src/main/java/com/tuinity/tuinity/util/PrimaryThreadSet.java
@@ -0,0 +1,282 @@
+package com.tuinity.tuinity.util;
+
+import org.spigotmc.AsyncCatcher;
+
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.function.IntFunction;
+import java.util.function.Predicate;
+import java.util.stream.Stream;
+
+public class PrimaryThreadSet<E> implements Set<E> {
+
+    protected final Set<E> wrapped;
+
+    public PrimaryThreadSet(final Set<E> wrap) {
+        if (wrap == null) {
+            throw new NullPointerException("Wrapped list may not be null");
+        }
+
+        this.wrapped = wrap;
+    }
+
+    protected void check() {
+        AsyncCatcher.catchOp("collection access");
+    }
+
+    @Override
+    public boolean add(final E element) {
+        this.check();
+        return this.wrapped.add(element);
+    }
+
+    @Override
+    public boolean addAll(final Collection<? extends E> collection) {
+        this.check();
+        return this.wrapped.addAll(collection);
+    }
+
+    @Override
+    public boolean remove(final Object element) {
+        this.check();
+        return this.wrapped.remove(element);
+    }
+
+    @Override
+    public boolean removeIf(final Predicate<? super E> filter) {
+        this.check();
+        return this.wrapped.removeIf(filter);
+    }
+
+    @Override
+    public boolean removeAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.removeAll(collection);
+    }
+
+    @Override
+    public boolean retainAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.retainAll(collection);
+    }
+
+    @Override
+    public void clear() {
+        this.check();
+        this.wrapped.clear();
+    }
+
+    @Override
+    public int size() {
+        this.check();
+        return this.wrapped.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        this.check();
+        return this.wrapped.isEmpty();
+    }
+
+    @Override
+    public boolean containsAll(final Collection<?> collection) {
+        this.check();
+        return this.wrapped.containsAll(collection);
+    }
+
+    @Override
+    public boolean contains(final Object object) {
+        this.check();
+        return this.wrapped.contains(object);
+    }
+
+    @Override
+    public void forEach(final Consumer<? super E> action) {
+        this.check();
+        this.wrapped.forEach(action);
+    }
+
+    @Override
+    public <T> T[] toArray(final T[] array) {
+        this.check();
+        return this.wrapped.toArray(array);
+    }
+
+    @Override
+    public <T> T[] toArray(final IntFunction<T[]> generator) {
+        this.check();
+        return this.wrapped.toArray(generator);
+    }
+
+    @Override
+    public Object[] toArray() {
+        this.check();
+        return this.wrapped.toArray();
+    }
+
+    @Override
+    public Iterator<E> iterator() {
+        this.check();
+        return this.wrapped.iterator();
+    }
+
+    @Override
+    public Stream<E> stream() {
+        this.check();
+        return this.wrapped.stream();
+    }
+
+    @Override
+    public Stream<E> parallelStream() {
+        this.check();
+        return this.wrapped.parallelStream();
+    }
+
+    @Override
+    public Spliterator<E> spliterator() {
+        this.check();
+        return this.wrapped.spliterator();
+    }
+
+    @Override
+    public String toString() {
+        this.check();
+        return this.wrapped.toString();
+    }
+
+    @Override
+    public int hashCode() {
+        this.check();
+        return this.wrapped.hashCode();
+    }
+
+    @Override
+    public boolean equals(final Object object) {
+        this.check();
+        return this.wrapped.equals(object);
+    }
+
+    public static class SortedPrimaryThreadSet<E> extends PrimaryThreadSet<E> implements SortedSet<E> {
+
+        public SortedPrimaryThreadSet(final SortedSet<E> set) {
+            super(set);
+        }
+
+        @Override
+        public Comparator<? super E> comparator() {
+            return ((SortedSet<E>)this.wrapped).comparator();
+        }
+
+        @Override
+        public E first() {
+            this.check();
+            return ((SortedSet<E>)this.wrapped).first();
+        }
+
+        @Override
+        public E last() {
+            this.check();
+            return ((SortedSet<E>)this.wrapped).last();
+        }
+
+        @Override
+        public SortedSet<E> headSet(final E toElement) {
+            this.check();
+            return ((SortedSet<E>)this.wrapped).headSet(toElement);
+        }
+
+        @Override
+        public SortedSet<E> subSet(final E fromElement, final E toElement) {
+            this.check();
+            return ((SortedSet<E>)this.wrapped).subSet(fromElement, toElement);
+        }
+
+        @Override
+        public SortedSet<E> tailSet(final E fromElement) {
+            this.check();
+            return ((SortedSet<E>)this.wrapped).tailSet(fromElement);
+        }
+    }
+
+    public static class NavigablePrimaryThreadSet<E> extends SortedPrimaryThreadSet<E> implements NavigableSet<E> {
+
+        public NavigablePrimaryThreadSet(final NavigableSet<E> set) {
+            super(set);
+        }
+
+        @Override
+        public E ceiling(final E element) {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).ceiling(element);
+        }
+
+        @Override
+        public E floor(final E element) {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).floor(element);
+        }
+
+        @Override
+        public E higher(final E element) {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).higher(element);
+        }
+
+        @Override
+        public E lower(final E element) {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).lower(element);
+        }
+
+        @Override
+        public E pollFirst() {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).pollFirst();
+        }
+
+        @Override
+        public E pollLast() {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).pollLast();
+        }
+
+        @Override
+        public Iterator<E> descendingIterator() {
+            this.check();
+            return ((NavigableSet<E>)this.wrapped).descendingIterator();
+        }
+
+        @Override
+        public final NavigableSet<E> descendingSet() {
+            this.check();
+            return new NavigablePrimaryThreadSet<>(((NavigableSet<E>)this.wrapped).descendingSet());
+        }
+
+        @Override
+        public NavigableSet<E> headSet(final E toElement, final boolean inclusive) {
+            this.check();
+            return new NavigablePrimaryThreadSet<>(((NavigableSet<E>)this.wrapped).headSet(toElement, inclusive));
+        }
+
+        @Override
+        public NavigableSet<E> subSet(final E fromElement, final boolean fromInclusive, final E toElement, final boolean toInclusive) {
+            this.check();
+            return new NavigablePrimaryThreadSet<>(((NavigableSet<E>)this.wrapped).subSet(fromElement, fromInclusive, toElement, toInclusive));
+        }
+
+        @Override
+        public NavigableSet<E> tailSet(final E fromElement, final boolean inclusive) {
+            this.check();
+            return new NavigablePrimaryThreadSet<>(((NavigableSet<E>)this.wrapped).tailSet(fromElement, inclusive));
+        }
+    }
+
+    public static <E> PrimaryThreadSet<E> of(final Set<E> set) {
+        if (set instanceof NavigableSet) {
+            return new NavigablePrimaryThreadSet<>((NavigableSet<E>)set);
+        } else if (set instanceof SortedSet) {
+            return new SortedPrimaryThreadSet<>((SortedSet<E>)set);
+        }
+        return new PrimaryThreadSet<>(set);
+    }
+}
