From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Tue, 17 Mar 2020 11:27:24 -0700
Subject: [PATCH] Handle extra packets in a more performant manner

- Don't make a flush call per extra packet
   Only make a flush call for the original packet + all extra packets

- Don't make multiple calls to get into the event loop
   Instead move all the packet writing logic into the event loop

diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index 211a6d7206788cbac80f2117d106f39ac3ef6dd5..77aa911c9830170b9f4b5cdf4e0ee2d4ae0d9a99 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -184,42 +184,54 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
             this.channel.config().setAutoRead(false);
         }
 
+        java.util.List<Packet> extraPackets = packet.getExtraPackets(); // Tuinity - make only one flush call for writing packets
+
         if (this.channel.eventLoop().inEventLoop()) {
             if (enumprotocol != enumprotocol1) {
                 this.setProtocol(enumprotocol);
             }
 
-            ChannelFuture channelfuture = this.channel.writeAndFlush(packet);
+            ChannelFuture channelfuture = (extraPackets == null || extraPackets.isEmpty()) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Tuinity - make only one flush call for writing packets
 
             if (genericfuturelistener != null) {
                 channelfuture.addListener(genericfuturelistener);
             }
 
             channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+            // Tuinity start - make only one flush call for writing packets
+            if (extraPackets != null && !extraPackets.isEmpty()) {
+                for (Packet extraPacket : extraPackets) {
+                    // note: don't add the genericfuturelistener, it's only expected to be called once...
+                    this.channel.write(extraPacket).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                }
+                this.channel.flush();
+            }
+            // Tuinity end - make only one flush call for writing packets
         } else {
             this.channel.eventLoop().execute(() -> {
                 if (enumprotocol != enumprotocol1) {
                     this.setProtocol(enumprotocol);
                 }
 
-                ChannelFuture channelfuture1 = this.channel.writeAndFlush(packet);
+                ChannelFuture channelfuture1 = (extraPackets == null || extraPackets.isEmpty()) ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Tuinity - make only one flush call for writing packets
 
                 if (genericfuturelistener != null) {
                     channelfuture1.addListener(genericfuturelistener);
                 }
 
                 channelfuture1.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                // Tuinity start - make only one flush call for writing packets
+                if (extraPackets != null && !extraPackets.isEmpty()) {
+                    for (Packet extraPacket : extraPackets) {
+                        // note: don't add the genericfuturelistener, it's only expected to be called once...
+                        this.channel.write(extraPacket).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                    }
+                    this.channel.flush();
+                }
+                // Tuinity end - make only one flush call for writing packets
             });
         }
-
-        // Paper start
-        java.util.List<Packet> extraPackets = packet.getExtraPackets();
-        if (extraPackets != null && !extraPackets.isEmpty()) {
-            for (Packet extraPacket : extraPackets) {
-                this.dispatchPacket(extraPacket, genericfuturelistener);
-            }
-        }
-        // Paper end
+        // Tuinity start - make only one flush call for writing packets
 
     }
 
