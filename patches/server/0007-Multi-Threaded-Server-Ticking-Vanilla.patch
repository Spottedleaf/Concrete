From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sun, 3 Mar 2019 20:53:18 -0800
Subject: [PATCH] Multi-Threaded Server Ticking Vanilla

This patch is the vanilla server changes

diff --git a/src/main/java/com/tuinity/tuinity/chunk/ChunkRegionManager.java b/src/main/java/com/tuinity/tuinity/chunk/ChunkRegionManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..ff17a100baaf4837a6375875a109ca19218c51a5
--- /dev/null
+++ b/src/main/java/com/tuinity/tuinity/chunk/ChunkRegionManager.java
@@ -0,0 +1,165 @@
+package com.tuinity.tuinity.chunk;
+
+import com.tuinity.tuinity.util.TickSynchronizationPoint;
+import com.tuinity.tuinity.util.TickThread;
+import com.tuinity.tuinity.util.Util;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.LongIterator;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import net.minecraft.server.World;
+
+public final class ChunkRegionManager {
+
+    private static final int REGION_MERGE_RADIUS = 1;
+
+    public final Long2ObjectOpenHashMap<ChunkRegionHolder> regions = new Long2ObjectOpenHashMap<>(8192, 0.25f);
+    public final World world;
+    public final TickSynchronizationPoint synchronizationPoint;
+
+    private final TickThread[] threads;
+
+    public ChunkRegionManager(final World world, final TickSynchronizationPoint synchronizationPoint, final TickThread[] threads) {
+        this.world = world;
+        this.synchronizationPoint = synchronizationPoint;
+        this.threads = threads;
+    }
+
+    public void addToRegion(final long coordinate) {
+        this.addToRegion(Util.getCoordinateX(coordinate), Util.getCoordinateZ(coordinate), coordinate);
+    }
+
+    public void addToRegion(final int chunkX, final int chunkZ) {
+        this.addToRegion(chunkX, chunkZ, Util.getCoordinateKey(chunkX, chunkZ));
+    }
+
+    // note: for MT, when we want to merge regions we actually need to tell the owning thread (if any) to merge it
+    // themselves
+    public void addToRegion(final int chunkX, final int chunkZ, final long coordinate) {
+        // find the ideal region to merge into
+
+        ChunkRegionHolder regionHolder = null;
+        ChunkRegion region = null;
+        int regionHolderChunks = 0;
+
+        for (int dx = -REGION_MERGE_RADIUS; dx <= REGION_MERGE_RADIUS; ++dx) {
+            for (int dz = -REGION_MERGE_RADIUS; dz <= REGION_MERGE_RADIUS; ++dz) {
+                final int checkX = dx + chunkX;
+                final int checkZ = dz + chunkZ;
+                final long k = Util.getCoordinateKey(checkX, checkZ);
+
+                ChunkRegionHolder currentRegion = this.regions.get(k);
+
+                if (currentRegion != null) {
+                    final int currentSize = currentRegion.region.coordinates.size();
+                    if (currentSize > regionHolderChunks) {
+                        regionHolderChunks = currentSize;
+                        regionHolder = currentRegion;
+                        region = currentRegion.region;
+                    }
+                }
+            }
+        }
+
+        if (regionHolder == null) {
+            regionHolder = new ChunkRegionHolder(region = new ChunkRegion());
+        }
+
+        // now merge regions in radius
+
+        region.addChunk(chunkX, chunkZ, coordinate);
+
+        for (int dx = -REGION_MERGE_RADIUS; dx <= REGION_MERGE_RADIUS; ++dx) {
+            for (int dz = -REGION_MERGE_RADIUS; dz <= REGION_MERGE_RADIUS; ++dz) {
+                final int checkX = dx + chunkX;
+                final int checkZ = dz + chunkZ;
+                final long k = Util.getCoordinateKey(checkX, checkZ);
+
+                ChunkRegionHolder currentRegion = this.regions.putIfAbsent(k, regionHolder);
+
+                if (currentRegion != null && currentRegion.region != region) {
+                    currentRegion.region.mergeInto(region);
+                }
+            }
+        }
+    }
+
+    static final class ChunkRegionHolder {
+
+        public ChunkRegion region;
+
+        public ChunkRegionHolder(final ChunkRegion region) {
+            this.region = region;
+            this.region.addRegionHolder(this);
+        }
+    }
+
+    static final class ChunkRegion {
+
+        private final LongOpenHashSet coordinates = new LongOpenHashSet();
+        private boolean dead;
+
+        private int lowerX;
+        private int lowerZ;
+
+        private int upperX;
+        private int upperZ;
+
+        private final ObjectOpenHashSet<ChunkRegionHolder> regionHolders = new ObjectOpenHashSet<>();
+
+        void addRegionHolder(final ChunkRegionHolder regionHolder) {
+            this.regionHolders.add(regionHolder);
+        }
+
+        public void mergeInto(final ChunkRegion region) {
+            if (region.dead) {
+                throw new IllegalStateException("Attempting to merge into a dead region");
+            } else if (this.dead) {
+                throw new IllegalStateException("Attempting to merge from a dead region");
+            }
+
+            for (LongIterator iterator = this.coordinates.iterator(); iterator.hasNext();) {
+                region.addChunk(iterator.nextLong());
+            }
+
+            // forward our old region holders
+            for (final ChunkRegionHolder regionHolder : this.regionHolders) {
+                regionHolder.region = region;
+            }
+
+            this.dead = true;
+        }
+
+        void addChunk(final long coordinate) {
+            this.addChunk(Util.getCoordinateX(coordinate), Util.getCoordinateZ(coordinate), coordinate);
+        }
+
+        void addChunk(final int chunkX, final int chunkZ) {
+            this.addChunk(chunkX, chunkZ, Util.getCoordinateKey(chunkX, chunkZ));
+        }
+
+        boolean addChunk(final int chunkX, final int chunkZ, final long coordinate) {
+            if (!this.coordinates.add(coordinate)) {
+                return false;
+            }
+
+            if (this.coordinates.size() == 1) {
+                this.lowerX = this.upperX = chunkX;
+                this.lowerZ = this.upperZ = chunkZ;
+            } else {
+                if (chunkX < this.lowerX) {
+                    this.lowerX = chunkX;
+                } else if (chunkX > this.upperX) {
+                    this.upperX = chunkX;
+                }
+                if (chunkZ < this.lowerZ) {
+                    this.lowerZ = chunkZ;
+                } else if (chunkZ > this.upperZ) {
+                    this.upperZ = chunkZ;
+                }
+            }
+
+            return true;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
index 8b078d7fea36329c2d53f66ebb7acc7d63a194b5..e997651111257025a50a427e687a2c36bd086213 100644
--- a/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
+++ b/src/main/java/com/tuinity/tuinity/config/TuinityConfig.java
@@ -104,6 +104,19 @@ public final class TuinityConfig {
         return TuinityConfig.config.getDouble(path, dfl);
     }
 
+    public static boolean tickWorldsInParallel;
+
+    /**
+     * if tickWorldsInParallel == true, then this value is used as a default only for worlds
+     */
+    public static int tickThreads;
+
+    /*
+    private static void worldticking() {
+        tickWorldsInParallel = TuinityConfig.getBoolean("tick-worlds-in-parallel", false);
+        tickThreads = TuinityConfig.getInt("server-tick-threads", 1); // will be 4 in the future
+    }*/
+
     public static final class WorldConfig {
 
         public final String worldName;
@@ -213,6 +226,15 @@ public final class TuinityConfig {
             }
             return this.config.getDouble(path, this.worldDefaults.getDouble(path));
         }
+
+        /** ignored if {@link TuinityConfig#tickWorldsInParallel} == false */
+        public int threads;
+
+        /*
+        private void worldthreading() {
+            final int threads = this.getInt("tick-threads", -1);
+            this.threads = threads == -1 ? TuinityConfig.tickThreads : threads;
+        }*/
     }
 
 }
diff --git a/src/main/java/com/tuinity/tuinity/util/TickSynchronizationPoint.java b/src/main/java/com/tuinity/tuinity/util/TickSynchronizationPoint.java
new file mode 100644
index 0000000000000000000000000000000000000000..37adae90072b3817c98620905029baac9faf88bb
--- /dev/null
+++ b/src/main/java/com/tuinity/tuinity/util/TickSynchronizationPoint.java
@@ -0,0 +1,40 @@
+package com.tuinity.tuinity.util;
+
+import ca.spottedleaf.concurrentutil.misc.SynchronizationPoint;
+
+public final class TickSynchronizationPoint {
+
+    private final SynchronizationPoint lock;
+
+    public TickSynchronizationPoint(final TickThread[] threads) {
+        this.lock = new SynchronizationPoint(threads);
+    }
+
+    private static int getIdForCurrentThread() {
+        return ((TickThread)Thread.currentThread()).id;
+    }
+
+    public void start() {
+        this.lock.start(getIdForCurrentThread());
+    }
+
+    public void end() {
+        this.lock.end(getIdForCurrentThread());
+    }
+
+    public void enter() {
+        this.lock.enter(getIdForCurrentThread());
+    }
+
+    public void weakEnter() {
+        this.lock.weakEnter(getIdForCurrentThread());
+    }
+
+    public void enterAlone() {
+        this.lock.enterAlone(getIdForCurrentThread());
+    }
+
+    public void endAloneExecution() {
+        this.lock.endAloneExecution(getIdForCurrentThread());
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/tuinity/tuinity/util/TickThread.java b/src/main/java/com/tuinity/tuinity/util/TickThread.java
new file mode 100644
index 0000000000000000000000000000000000000000..033548a58d27f64d3954206d267783c0437d4019
--- /dev/null
+++ b/src/main/java/com/tuinity/tuinity/util/TickThread.java
@@ -0,0 +1,15 @@
+package com.tuinity.tuinity.util;
+
+public final class TickThread extends Thread {
+
+    public final int id; /* We don't override getId as the spec requires that it be unique (with respect to all other threads) */
+
+    public TickThread(final Runnable run, final String name, final int id) {
+        super(run, name);
+        this.id = id;
+    }
+
+    public static TickThread getCurrentTickThread() {
+        return (TickThread)Thread.currentThread();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ca6468c245c6446ada97aaf983bede1797b01ce8..bb1d45a94379fbbc220916cc4fac4d902a7e2dc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1707,7 +1707,10 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean isPrimaryThread() {
-        return Thread.currentThread().equals(console.serverThread); // Paper - Fix issues with detecting main thread properly
+        // Tuinity start
+        final Thread currThread = Thread.currentThread();
+        return currThread == console.serverThread || currThread instanceof com.tuinity.tuinity.util.TickThread;
+        // Tuinity End
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index 9f7d2ef932ab41cef5d3d0736d20a7c7e4a2c888..10606ed03e88e4e467de2d5424df12466c4e7873 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -10,7 +10,7 @@ public class AsyncCatcher
 
     public static void catchOp(String reason)
     {
-        if ( enabled && Thread.currentThread() != MinecraftServer.getServer().serverThread )
+        if ( enabled && !org.bukkit.Bukkit.isPrimaryThread() ) // Tuinity
         {
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
