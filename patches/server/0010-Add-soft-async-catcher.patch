From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sat, 17 Aug 2019 18:06:04 -0700
Subject: [PATCH] Add soft async catcher

Must be enabled via -Dconcrete.strict-thread-checks=true

diff --git a/src/main/java/ca/spottedleaf/concrete/util/TickThread.java b/src/main/java/ca/spottedleaf/concrete/util/TickThread.java
index d13b521702f31d91f8b19f59f7dfc8f3f76d65b4..07eed2c8011b26e4eda1dfacc1e929b293685aa0 100644
--- a/src/main/java/ca/spottedleaf/concrete/util/TickThread.java
+++ b/src/main/java/ca/spottedleaf/concrete/util/TickThread.java
@@ -1,11 +1,36 @@
 package ca.spottedleaf.concrete.util;
 
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+
 public final class TickThread extends Thread {
 
+    public static final boolean STRICT_THREAD_CHECKS = Boolean.getBoolean("concrete.strict-thread-checks");
+
+    static {
+        if (STRICT_THREAD_CHECKS) {
+            MinecraftServer.LOGGER.warn("Strict thread checks enabled - performance may suffer");
+        }
+    }
+
     public final int id; /* We don't override getId as the spec requires that it be unique (with respect to all other threads) */
 
     public TickThread(final Runnable run, final String name, final int id) {
         super(run, name);
         this.id = id;
     }
+
+    public static void softEnsureTickThread(final String reason) {
+        if (!STRICT_THREAD_CHECKS) {
+            return;
+        }
+        ensureTickThread(reason);
+    }
+
+
+    public static void ensureTickThread(final String reason) {
+        if (!Bukkit.isPrimaryThread()) {
+            throw new IllegalStateException(reason);
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index c35c165195e09734a6dcaa16b8a804754f032d96..0d3307990cda1a8945ab73a2782ea504c5afe067 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -446,6 +446,7 @@ public class Chunk implements IChunkAccess {
 
     @Override
     public void a(Entity entity) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async addEntity call"); /* Concrete */
         this.q = true;
         int i = MathHelper.floor(entity.locX() / 16.0D);
         int j = MathHelper.floor(entity.locZ() / 16.0D);
@@ -514,6 +515,7 @@ public class Chunk implements IChunkAccess {
     }
 
     public void a(Entity entity, int i) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async removeEntity call"); /* Concrete */
         if (i < 0) {
             i = 0;
         }
@@ -775,6 +777,7 @@ public class Chunk implements IChunkAccess {
     }
 
     public void a(@Nullable Entity entity, AxisAlignedBB axisalignedbb, List<Entity> list, @Nullable Predicate<? super Entity> predicate) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async getEntities call"); /* Concrete */
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
@@ -814,6 +817,7 @@ public class Chunk implements IChunkAccess {
     }
 
     public <T extends Entity> void a(@Nullable EntityTypes<?> entitytypes, AxisAlignedBB axisalignedbb, List<? super T> list, Predicate<? super T> predicate) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async getEntities call"); /* Concrete */
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
@@ -836,6 +840,7 @@ public class Chunk implements IChunkAccess {
     }
 
     public <T extends Entity> void a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, List<T> list, @Nullable Predicate<? super T> predicate) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async getEntities call"); /* Concrete */
         int i = MathHelper.floor((axisalignedbb.minY - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxY + 2.0D) / 16.0D);
 
diff --git a/src/main/java/net/minecraft/server/ChunkMapDistance.java b/src/main/java/net/minecraft/server/ChunkMapDistance.java
index 8c1945687537bad2cc039e347d77810b55042264..d73d6e7a07739e000d613eb2923a7fff0c3eb5fd 100644
--- a/src/main/java/net/minecraft/server/ChunkMapDistance.java
+++ b/src/main/java/net/minecraft/server/ChunkMapDistance.java
@@ -53,6 +53,7 @@ public abstract class ChunkMapDistance {
     }
 
     protected void purgeTickets() {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async purge tickets"); /* Concrete */
         ++this.currentTick;
         ObjectIterator objectiterator = this.tickets.long2ObjectEntrySet().fastIterator();
 
@@ -136,6 +137,7 @@ public abstract class ChunkMapDistance {
     }
 
     private boolean addTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async ticket add"); /* Concrete */
         ArraySetSorted<Ticket<?>> arraysetsorted = this.e(i);
         int j = a(arraysetsorted);
         Ticket<?> ticket1 = (Ticket) arraysetsorted.a(ticket); // CraftBukkit - decompile error
@@ -149,6 +151,7 @@ public abstract class ChunkMapDistance {
     }
 
     private boolean removeTicket(long i, Ticket<?> ticket) { // CraftBukkit - void -> boolean
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async ticket remove"); /* Concrete */
         ArraySetSorted<Ticket<?>> arraysetsorted = this.e(i);
 
         boolean removed = false; // CraftBukkit
@@ -197,6 +200,7 @@ public abstract class ChunkMapDistance {
     }
 
     private ArraySetSorted<Ticket<?>> e(long i) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async tickets compute"); /* Concrete */
         return (ArraySetSorted) this.tickets.computeIfAbsent(i, (j) -> {
             return ArraySetSorted.a(4);
         });
@@ -214,6 +218,7 @@ public abstract class ChunkMapDistance {
     }
 
     public void a(SectionPosition sectionposition, EntityPlayer entityplayer) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async player add"); /* Concrete */
         long i = sectionposition.u().pair();
 
         ((ObjectSet) this.c.computeIfAbsent(i, (j) -> {
@@ -224,6 +229,7 @@ public abstract class ChunkMapDistance {
     }
 
     public void b(SectionPosition sectionposition, EntityPlayer entityplayer) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async player remove"); /* Concrete */
         long i = sectionposition.u().pair();
         ObjectSet<EntityPlayer> objectset = (ObjectSet) this.c.get(i);
 
@@ -269,6 +275,7 @@ public abstract class ChunkMapDistance {
 
     // CraftBukkit start
     public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async ticket remove"); /* Concrete */
         Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
 
         for (java.util.Iterator<ArraySetSorted<Ticket<?>>> iterator = this.tickets.values().iterator(); iterator.hasNext();) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 3a88c9a67062eb73ad8257ea786efca7e7e99f65..0634356d37c5ade98aa846f8f2ef29a2cb648aac 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -71,6 +71,7 @@ public class EntityTrackerEntry {
     }
 
     public void a() {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Tracker update"); /* Concrete */
         List<Entity> list = this.tracker.getPassengers();
 
         if (!list.equals(this.p)) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index f7a00ee372bda387675d007e4402a54801230e6c..964d99941489d599f36c58a87c19959b71f1e6b7 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -323,6 +323,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
 
     @Nullable
     private PlayerChunk a(long i, int j, @Nullable PlayerChunk playerchunk, int k) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Chunk holder update"); /* Concrete */
         if (k > PlayerChunkMap.GOLDEN_TICKET && j > PlayerChunkMap.GOLDEN_TICKET) {
             return playerchunk;
         } else {
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index d9f357351e591902f2ecf97a9085ebf1478a2f4a..a990e54e88c2821cf6db440cb1f5e3684afa5a04 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -350,6 +350,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     @Override
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async set type call"); /* Concrete */
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
             CraftBlockState blockstate = null;
@@ -454,6 +455,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     // CraftBukkit start - Split off from above in order to directly send client and physic updates
     public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, IBlockData oldBlock, IBlockData newBlock, IBlockData actualBlock, int i) {
+        ca.spottedleaf.concrete.util.TickThread.softEnsureTickThread("Async notify and update"); /* Concrete */
         IBlockData iblockdata = newBlock;
         IBlockData iblockdata1 = oldBlock;
         IBlockData iblockdata2 = actualBlock;
diff --git a/src/main/java/org/spigotmc/AsyncCatcher.java b/src/main/java/org/spigotmc/AsyncCatcher.java
index c0f95ed8ec90349e639af32eb227d602efcc26c2..8365443e7367ac490518fc57aac7ca8bf91aa614 100644
--- a/src/main/java/org/spigotmc/AsyncCatcher.java
+++ b/src/main/java/org/spigotmc/AsyncCatcher.java
@@ -10,7 +10,7 @@ public class AsyncCatcher
 
     public static void catchOp(String reason)
     {
-        if ( enabled && !org.bukkit.Bukkit.isPrimaryThread() ) /* Concrete */
+        if ( ( enabled || ca.spottedleaf.concrete.util.TickThread.STRICT_THREAD_CHECKS ) && !org.bukkit.Bukkit.isPrimaryThread() ) /* Concrete */
         {
             throw new IllegalStateException( "Asynchronous " + reason + "!" );
         }
