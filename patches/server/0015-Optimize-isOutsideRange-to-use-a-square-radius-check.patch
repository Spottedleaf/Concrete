From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Sun, 29 Sep 2019 20:47:13 -0700
Subject: [PATCH] Optimize isOutsideRange to use a square radius check

This option is configurable under 'optimize-chunkrange-check', and is
enabled by default

diff --git a/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java b/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
index 8f5d4fd24a2e4c716204a31455506a6e464b2dd6..9fc9f82809e5d14e60865513430f76d6aa46e575 100644
--- a/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
+++ b/src/main/java/ca/spottedleaf/concrete/config/ConcreteConfig.java
@@ -109,6 +109,12 @@ public final class ConcreteConfig {
         }
     }
 
+    public static boolean optimizeChunkRangeCheck;
+
+    private static void optimizeChunkRangeCheck() {
+        optimizeChunkRangeCheck = ConcreteConfig.getBoolean("optimize-chunkrange-check", true);
+    }
+
     public static final class WorldConnfig {
 
         public final String worldName;
diff --git a/src/main/java/net/minecraft/server/ChunkMapDistance.java b/src/main/java/net/minecraft/server/ChunkMapDistance.java
index e597d44ac5b3fb6cafac44601d53fcdc68e530c4..541f36d89fc4fc03c8f4e04673010efae5d24e1b 100644
--- a/src/main/java/net/minecraft/server/ChunkMapDistance.java
+++ b/src/main/java/net/minecraft/server/ChunkMapDistance.java
@@ -32,7 +32,7 @@ public abstract class ChunkMapDistance {
     private final Long2ObjectMap<ObjectSet<EntityPlayer>> c = new Long2ObjectOpenHashMap();
     public final Long2ObjectOpenHashMap<ArraySetSorted<Ticket<?>>> tickets = new Long2ObjectOpenHashMap();
     private final ChunkMapDistance.a e = new ChunkMapDistance.a();
-    private final ChunkMapDistance.b f = new ChunkMapDistance.b(8);
+    public static final int MOB_SPAWN_RANGE = 8; //private final ChunkMapDistance.b f = new ChunkMapDistance.b(8); /* Concrete - no longer used */
     //private final ChunkMapDistance.c g = new ChunkMapDistance.c(33); /* Concrete - no longer used */
     private final java.util.Queue<PlayerChunk> pendingChunkUpdates = new java.util.ArrayDeque<>(); // PAIL pendingChunkUpdates // Paper - use a queue /* Concrete - use a better queue */
     private final ChunkTaskQueueSorter i;
@@ -92,7 +92,7 @@ public abstract class ChunkMapDistance {
     protected abstract PlayerChunk a(long i, int j, @Nullable PlayerChunk playerchunk, int k);
 
     public boolean a(PlayerChunkMap playerchunkmap) {
-        this.f.a();
+        //this.f.a(); /* Concrete - no longer used */
         //this.g.a(); /* Concrete - no longer used */
         int i = Integer.MAX_VALUE - this.e.a(Integer.MAX_VALUE);
         boolean flag = i != 0;
@@ -230,7 +230,7 @@ public abstract class ChunkMapDistance {
         ((ObjectSet) this.c.computeIfAbsent(i, (j) -> {
             return new ObjectOpenHashSet();
         })).add(entityplayer);
-        this.f.b(i, 0, true);
+        //this.f.b(i, 0, true); /* Concrete - no longer used */
         //this.g.b(i, 0, true); /* Concrete - no longer used */
     }
 
@@ -242,7 +242,7 @@ public abstract class ChunkMapDistance {
         objectset.remove(entityplayer);
         if (objectset.isEmpty()) {
             this.c.remove(i);
-            this.f.b(i, Integer.MAX_VALUE, false);
+            //this.f.b(i, Integer.MAX_VALUE, false); /* Concrete - no longer used */
             //this.g.b(i, Integer.MAX_VALUE, false); /* Concrete - no longer used */
         }
 
@@ -273,13 +273,17 @@ public abstract class ChunkMapDistance {
     /* Concrete end */
 
     public int b() {
-        this.f.a();
-        return this.f.a.size();
+        /* Concrete start - use distance map to implement */
+        // note: this is the spawn chunk count
+        return this.chunkMap.playerChunkTickRangeMap.size();
+        /* Concrete end - use distance map to implement */
     }
 
     public boolean d(long i) {
-        this.f.a();
-        return this.f.a.containsKey(i);
+        /* Concrete start - use distance map to implement */
+        // note: this is the is spawn chunk method
+        return this.chunkMap.playerChunkTickRangeMap.getObjectsInRange(i) != null;
+        /* Concrete end - use distance map to implement */
     }
 
     public String c() {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index e63ef5ebd721215a1b8fea43a651aaf58cf8ca65..0548d3bfa594c721948da4562a357348f44c3b93 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -628,6 +628,37 @@ public class ChunkProviderServer extends IChunkProvider {
         boolean flag1 = this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING) && !world.getPlayers().isEmpty(); // CraftBukkit
 
         if (!flag) {
+            /* Concrete start - optimize isOutisdeRange */
+            if (ca.spottedleaf.concrete.config.ConcreteConfig.optimizeChunkRangeCheck) {
+                PlayerChunkMap playerChunkMap = this.playerChunkMap;
+                for (EntityPlayer player : this.world.players) {
+                    if (!player.affectsSpawning || player.isSpectator()) {
+                        playerChunkMap.playerMobSpawnMap.remove(player);
+                        continue;
+                    }
+
+                    int viewDistance = player.getEffectiveViewDistance(playerChunkMap);
+
+                    // copied and modified from isOutisdeRange
+                    int chunkRange = world.spigotConfig.mobSpawnRange;
+                    chunkRange = (chunkRange > viewDistance) ? (byte)viewDistance : chunkRange;
+                    chunkRange = (chunkRange > ChunkMapDistance.MOB_SPAWN_RANGE) ? ChunkMapDistance.MOB_SPAWN_RANGE : chunkRange;
+
+                    com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent event = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(player.getBukkitEntity(), (byte)chunkRange);
+                    event.callEvent();
+                    if (event.isCancelled() || event.getSpawnRadius() < 0) {
+                        playerChunkMap.playerMobSpawnMap.remove(player);
+                        continue;
+                    }
+
+                    int range = Math.min(event.getSpawnRadius(), 32); // limit to max view distance
+                    int chunkX = ca.spottedleaf.concrete.util.Util.getChunkCoordinate(player.locX());
+                    int chunkZ = ca.spottedleaf.concrete.util.Util.getChunkCoordinate(player.locZ());
+
+                    playerChunkMap.playerMobSpawnMap.update(player, chunkX, chunkZ, range);
+                }
+            }
+            /* Concrete end - optimize isOutisdeRange */
             this.world.getMethodProfiler().enter("pollingChunks");
             int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
             BlockPosition blockposition = this.world.getSpawn();
@@ -672,7 +703,7 @@ public class ChunkProviderServer extends IChunkProvider {
                     // Paper start - timings
                     this.world.timings.chunkRangeCheckBig.startTiming();
                     // note: this is just a copy of the expression in the if
-                    boolean bigRadiusOutsideRange = !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair);
+                    boolean bigRadiusOutsideRange = ca.spottedleaf.concrete.config.ConcreteConfig.optimizeChunkRangeCheck ? this.playerChunkMap.playerChunkTickRangeMap.getObjectsInRange(chunk.getPos()) != null : !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair); /* Concrete - optimize isOutisdeRange */
                     this.world.timings.chunkRangeCheckBig.stopTiming();
                     if (bigRadiusOutsideRange) {
                         // Paper end
@@ -680,7 +711,7 @@ public class ChunkProviderServer extends IChunkProvider {
                         // Paper start - timings
                         this.world.timings.chunkRangeCheckSmall.startTiming();
                         // note: this is just a copy of the expression in the if
-                        boolean smallRadiusOutsideRange = flag1 && (this.allowMonsters || this.allowAnimals) && this.world.getWorldBorder().isInBounds(chunk.getPos()) && !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair, true);
+                        boolean smallRadiusOutsideRange = flag1 && (this.allowMonsters || this.allowAnimals) && this.world.getWorldBorder().isInBounds(chunk.getPos()) && (ca.spottedleaf.concrete.config.ConcreteConfig.optimizeChunkRangeCheck ? this.playerChunkMap.playerMobSpawnMap.getObjectsInRange(chunk.getPos()) != null : !this.playerChunkMap.isOutsideOfRange(chunkcoordintpair, true)); /* Concrete - optimize isOutisdeRange */
                         this.world.timings.chunkRangeCheckSmall.stopTiming();
                         if (smallRadiusOutsideRange) { // Spigot
                             // Paper end
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 044784f692583ec247ffe487441a2721a7aa2198..d840c25b0fa13ba6662066018a7b385cbe419f50 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -120,6 +120,16 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         return distance;
     }
 
+    // A note about the naming used here:
+    // Previously, mojang used a "spawn range" of 8 for controlling both ticking and
+    // mob spawn range. However, spigot makes the spawn range configurable by
+    // checking if the chunk is in the tick range (8) and the spawn range
+    // obviously this means a spawn range > 8 cannot be implemented
+
+    // these maps are named after spigot's uses
+    public final ca.spottedleaf.concrete.util.map.PlayerAreaMap playerMobSpawnMap; // this map is absent from updateMaps since it's controlled at the start of a tick
+    public final ca.spottedleaf.concrete.util.map.PlayerAreaMap playerChunkTickRangeMap;
+
     void addPlayerToDistanceMaps(EntityPlayer player) {
         try (co.aikar.timings.Timing ignored = this.world.timings.playerViewDistanceMapAdd.startTiming()) {
             this.updateMaps(player);
@@ -133,6 +143,8 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             this.playerViewDistanceTicketMap.remove(player);
             this.playerViewDistanceMap.remove(player);
             this.getChunkMapDistanceManager().playerTicketHandler.removePlayer(player);
+            this.playerMobSpawnMap.remove(player);
+            this.playerChunkTickRangeMap.remove(player);
         }
     }
 
@@ -159,6 +171,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         player.needsChunkCenterUpdate = true;
         this.playerViewDistanceBroadcastMap.update(player, chunkX, chunkZ, effectiveViewDistance + 1); // clients need chunk neighbours
         player.needsChunkCenterUpdate = false;
+        this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
     }
 
     private void updateMaps(EntityPlayer player) {
@@ -174,6 +187,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         player.needsChunkCenterUpdate = true;
         this.playerViewDistanceBroadcastMap.update(player, chunkX, chunkZ, effectiveViewDistance + 1); // clients need chunk neighbours
         player.needsChunkCenterUpdate = false;
+        this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
     }
     /* Concrete end */
 
@@ -237,6 +251,9 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     PlayerChunkMap.this.sendChunk(player, rangeX, rangeZ, tempPacket, true, false); // unloaded, loaded
                     java.util.Arrays.fill(tempPacket, null);
                 });
+
+        this.playerChunkTickRangeMap = new ca.spottedleaf.concrete.util.map.PlayerAreaMap(sets);
+        this.playerMobSpawnMap = new ca.spottedleaf.concrete.util.map.PlayerAreaMap(sets);
         /* Concrete end - distance maps */
     }
 
