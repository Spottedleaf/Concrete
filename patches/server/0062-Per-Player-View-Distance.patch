From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fluse1367 <18399629+fluse1367@users.noreply.github.com>
Date: Mon, 4 Jan 2021 13:55:27 +0100
Subject: [PATCH] Per-Player View-Distance


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 5dfa0658838c4801cdf260eae8b98163f729e5af..d485efcbd30ea3ec641b0a7fccf6c09800207256 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -153,8 +153,8 @@ public class TimingsExport extends Thread {
                 pair("gamerules", toObjectMapper(world.getWorld().getGameRules(), rule -> {
                     return pair(rule, world.getWorld().getGameRuleValue(rule));
                 })),
-                pair("ticking-distance", world.getChunkProvider().playerChunkMap.getEffectiveViewDistance()),
-                pair("notick-viewdistance", world.getChunkProvider().playerChunkMap.getEffectiveNoTickViewDistance())
+                pair("ticking-distance", world.getChunkProvider().playerChunkMap.getEffectiveViewDistance(null)),
+                pair("notick-viewdistance", world.getChunkProvider().playerChunkMap.getEffectiveNoTickViewDistance(null))
             ));
         }));
 
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 12d9b73ccc2f4406957932397746cac7902d650e..7c4af5846025100cf65327044b79b138cb8ece78 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -950,7 +950,7 @@ public class ChunkProviderServer extends IChunkProvider {
                     continue;
                 }
 
-                int viewDistance = this.playerChunkMap.getEffectiveViewDistance();
+                int viewDistance = this.playerChunkMap.getEffectiveViewDistance(player.getBukkitEntity());
 
                 // copied and modified from isOutisdeRange
                 int chunkRange = world.spigotConfig.mobSpawnRange;
diff --git a/src/main/java/net/minecraft/server/MCUtil.java b/src/main/java/net/minecraft/server/MCUtil.java
index 653ba0f1d84af1997d768426d3542c9d465f6c93..cdefbe18eb54cc8cc2fd3d90137fa85e13898511 100644
--- a/src/main/java/net/minecraft/server/MCUtil.java
+++ b/src/main/java/net/minecraft/server/MCUtil.java
@@ -622,7 +622,7 @@ public final class MCUtil {
             });
 
             worldData.addProperty("name", world.getWorld().getName());
-            worldData.addProperty("view-distance", world.getChunkProvider().playerChunkMap.getEffectiveViewDistance());
+            worldData.addProperty("view-distance", world.getChunkProvider().playerChunkMap.getEffectiveViewDistance(null));
             worldData.addProperty("no-view-distance", world.getChunkProvider().playerChunkMap.getRawNoTickViewDistance());
             worldData.addProperty("keep-spawn-loaded", world.keepSpawnInMemory);
             worldData.addProperty("keep-spawn-loaded-range", world.paperConfig.keepLoadedRange);
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 8286039c4e2db33b7782b9af13e6ac8f7a2ff484..762fa4f560e0e03728dafa4e86d98e0e76e87166 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -184,11 +184,11 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     public final int getRawNoTickViewDistance() {
         return this.noTickViewDistance;
     }
-    public final int getEffectiveNoTickViewDistance() {
-        return this.noTickViewDistance == -1 ? this.getEffectiveViewDistance() : this.noTickViewDistance;
+    public final int getEffectiveNoTickViewDistance(Player player) {
+        return this.noTickViewDistance == -1 ? this.getEffectiveViewDistance(player) : this.noTickViewDistance;
     }
-    public final int getLoadViewDistance() {
-        return Math.max(this.getEffectiveViewDistance(), this.getEffectiveNoTickViewDistance());
+    public final int getLoadViewDistance(Player player) {
+        return Math.max(this.getEffectiveViewDistance(player), this.getEffectiveNoTickViewDistance(player));
     }
 
     public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceBroadcastMap;
@@ -209,15 +209,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
             int trackRange = this.entityTrackerTrackRanges[i];
 
-            trackMap.add(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance()));
+            trackMap.add(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance(player.getBukkitEntity())));
         }
         // Paper end - use distance map to optimise entity tracker
         // Paper start - optimise PlayerChunkMap#isOutsideRange
         this.playerChunkTickRangeMap.add(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
         // Paper end - optimise PlayerChunkMap#isOutsideRange
         // Paper start - no-tick view distance
-        int effectiveTickViewDistance = this.getEffectiveViewDistance();
-        int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+        int effectiveTickViewDistance = this.getEffectiveViewDistance(player.getBukkitEntity());
+        int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(player.getBukkitEntity()), effectiveTickViewDistance);
 
         if (!this.cannotLoadChunks(player)) {
             this.playerViewDistanceTickMap.add(player, chunkX, chunkZ, effectiveTickViewDistance);
@@ -264,15 +264,15 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
             com.destroystokyo.paper.util.misc.PlayerAreaMap trackMap = this.playerEntityTrackerTrackMaps[i];
             int trackRange = this.entityTrackerTrackRanges[i];
 
-            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance()));
+            trackMap.update(player, chunkX, chunkZ, Math.min(trackRange, this.getEffectiveViewDistance(player.getBukkitEntity())));
         }
         // Paper end - use distance map to optimise entity tracker
         // Paper start - optimise PlayerChunkMap#isOutsideRange
         this.playerChunkTickRangeMap.update(player, chunkX, chunkZ, ChunkMapDistance.MOB_SPAWN_RANGE);
         // Paper end - optimise PlayerChunkMap#isOutsideRange
         // Paper start - no-tick view distance
-        int effectiveTickViewDistance = this.getEffectiveViewDistance();
-        int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+        int effectiveTickViewDistance = this.getEffectiveViewDistance(player.getBukkitEntity());
+        int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(player.getBukkitEntity()), effectiveTickViewDistance);
 
         if (!this.cannotLoadChunks(player)) {
             this.playerViewDistanceTickMap.update(player, chunkX, chunkZ, effectiveTickViewDistance);
@@ -531,7 +531,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         player.lastHighPriorityChecked = currentTick;
         Long2IntOpenHashMap priorities = new Long2IntOpenHashMap();
 
-        int viewDistance = getEffectiveNoTickViewDistance();
+        int viewDistance = getEffectiveNoTickViewDistance(player.getBukkitEntity());
         BlockPosition.MutableBlockPosition pos = new BlockPosition.MutableBlockPosition();
 
         // Prioritize circular near
@@ -721,9 +721,14 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
     }
 
     // Paper start
-    public final int getEffectiveViewDistance() {
+    public final int getEffectiveViewDistance(Player player) {
         // TODO this needs to be checked on update
         // Mojang currently sets it to +1 of the configured view distance. So subtract one to get the one we really want.
+        if (player != null) {
+            int perPlayerViewDistance = player.getViewDistance();
+            if(perPlayerViewDistance > 0 )
+                return perPlayerViewDistance;
+        }
         return this.viewDistance - 1;
     }
     // Paper end
@@ -1583,7 +1588,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         viewDistance = viewDistance == -1 ? -1 : MathHelper.clamp(viewDistance, 2, 32);
 
         this.noTickViewDistance = viewDistance;
-        int loadViewDistance = this.getLoadViewDistance();
+        int loadViewDistance = this.getLoadViewDistance(null);
         this.chunkDistanceManager.setNoTickViewDistance(loadViewDistance + 2 + 2); // add 2 to account for the change to 31 -> 33 tickets // see notes in the distance map updating for the other + 2
 
         if (this.world != null && this.world.players != null) { // this can be called from constructor, where these aren't set
@@ -1591,7 +1596,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                 PlayerConnection connection = player.playerConnection;
                 if (connection != null) {
                     // moved in from PlayerList
-                    connection.sendPacket(new PacketPlayOutViewDistance(loadViewDistance));
+                    connection.sendPacket(new PacketPlayOutViewDistance(this.getLoadViewDistance(player.getBukkitEntity())));
                 }
                 this.updateMaps(player);
             }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index 70f702680f8221cb262023814a7bae21b0074da6..acfd5c101266993766b1a56347cf5973bfe0bd09 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -186,7 +186,7 @@ public abstract class PlayerList {
         boolean flag1 = gamerules.getBoolean(GameRules.REDUCED_DEBUG_INFO);
 
         // Spigot - view distance
-        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), entityplayer.playerInteractManager.c(), BiomeManager.a(worldserver1.getSeed()), worlddata.isHardcore(), this.server.F(), this.s, worldserver1.getDimensionManager(), worldserver1.getDimensionKey(), this.getMaxPlayers(), worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance(), flag1, !flag, worldserver1.isDebugWorld(), worldserver1.isFlatWorld())); // Paper - no-tick view distance
+        playerconnection.sendPacket(new PacketPlayOutLogin(entityplayer.getId(), entityplayer.playerInteractManager.getGameMode(), entityplayer.playerInteractManager.c(), BiomeManager.a(worldserver1.getSeed()), worlddata.isHardcore(), this.server.F(), this.s, worldserver1.getDimensionManager(), worldserver1.getDimensionKey(), this.getMaxPlayers(), worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance(bukkitPlayer), flag1, !flag, worldserver1.isDebugWorld(), worldserver1.isFlatWorld())); // Paper - no-tick view distance
         entityplayer.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
         playerconnection.sendPacket(new PacketPlayOutCustomPayload(PacketPlayOutCustomPayload.a, (new PacketDataSerializer(Unpooled.buffer())).a(this.getServer().getServerModName())));
         playerconnection.sendPacket(new PacketPlayOutServerDifficulty(worlddata.getDifficulty(), worlddata.isDifficultyLocked()));
@@ -848,7 +848,7 @@ public abstract class PlayerList {
         // CraftBukkit start
         WorldData worlddata = worldserver1.getWorldData();
         entityplayer1.playerConnection.sendPacket(new PacketPlayOutRespawn(worldserver1.getDimensionManager(), worldserver1.getDimensionKey(), BiomeManager.a(worldserver1.getSeed()), entityplayer1.playerInteractManager.getGameMode(), entityplayer1.playerInteractManager.c(), worldserver1.isDebugWorld(), worldserver1.isFlatWorld(), flag));
-        entityplayer1.playerConnection.sendPacket(new PacketPlayOutViewDistance(worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance())); // Spigot // Paper - no-tick view distance
+        entityplayer1.playerConnection.sendPacket(new PacketPlayOutViewDistance(worldserver1.getChunkProvider().playerChunkMap.getLoadViewDistance(entityplayer1.getBukkitEntity()))); // Spigot // Paper - no-tick view distance
         entityplayer1.spawnIn(worldserver1);
         entityplayer1.dead = false;
         entityplayer1.playerConnection.teleport(new Location(worldserver1.getWorld(), entityplayer1.locX(), entityplayer1.locY(), entityplayer1.locZ(), entityplayer1.yaw, entityplayer1.pitch));
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a69b38f293723a58691b2777d170f9cc146d1148..a00c499bd9df345ba39f60b7873ef04e38d23ef2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2588,7 +2588,7 @@ public class CraftWorld implements World {
     // Spigot start
     @Override
     public int getViewDistance() {
-        return getHandle().getChunkProvider().playerChunkMap.getEffectiveViewDistance(); // Paper - no-tick view distance
+        return getHandle().getChunkProvider().playerChunkMap.getEffectiveViewDistance(null); // Paper - no-tick view distance
     }
     // Spigot end
 
@@ -2599,14 +2599,14 @@ public class CraftWorld implements World {
             throw new IllegalArgumentException("View distance " + viewDistance + " is out of range of [2, 32]");
         }
         net.minecraft.server.PlayerChunkMap chunkMap = getHandle().getChunkProvider().playerChunkMap;
-        if (viewDistance != chunkMap.getEffectiveViewDistance()) {
+        if (viewDistance != chunkMap.getEffectiveViewDistance(null)) {
             chunkMap.setViewDistance(viewDistance);
         }
     }
 
     @Override
     public int getNoTickViewDistance() {
-        return getHandle().getChunkProvider().playerChunkMap.getEffectiveNoTickViewDistance();
+        return getHandle().getChunkProvider().playerChunkMap.getEffectiveNoTickViewDistance(null);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 58caa3240b90cdc661e1e32e3f5c312ed62c3c21..6876f41b98f1a3a6e87fbf2f2a4aa6571bb20fea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -88,7 +88,6 @@ import org.bukkit.Particle;
 import org.bukkit.Sound;
 import org.bukkit.Statistic;
 import org.bukkit.WeatherType;
-import org.bukkit.World;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.conversations.Conversation;
@@ -2059,14 +2058,18 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
+    private int perPlayerViewDistance = -1;
+
     @Override
     public int getViewDistance() {
-        throw new NotImplementedException("Per-Player View Distance APIs need further understanding to properly implement (There are per world view distances though!)"); // TODO
+        return perPlayerViewDistance;
+        //throw new NotImplementedException("Per-Player View Distance APIs need further understanding to properly implement (There are per world view distances though!)"); // TODO
     }
 
     @Override
     public void setViewDistance(int viewDistance) {
-        throw new NotImplementedException("Per-Player View Distance APIs need further understanding to properly implement (There are per world view distances though!)"); // TODO
+        this.perPlayerViewDistance = viewDistance;
+        //throw new NotImplementedException("Per-Player View Distance APIs need further understanding to properly implement (There are per world view distances though!)"); // TODO
     }
 
     @Override
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 0b93635ba59df4eb4456a97c5e9b51ab5aeda53f..ffb23c98c76f4ec9a8bc6b9bef982570081879e4 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -201,13 +201,14 @@ public class ActivationRange
         maxRange = Math.max( maxRange, waterActivationRange );
         maxRange = Math.max( maxRange, villagerActivationRange );
         // Paper end
-        maxRange = Math.min( ( ((net.minecraft.server.WorldServer)world).getChunkProvider().playerChunkMap.getEffectiveViewDistance() << 4 ) - 8, maxRange ); // Paper - no-tick view distance
+        //maxRange = Math.min( ( ((net.minecraft.server.WorldServer)world).getChunkProvider().playerChunkMap.getEffectiveViewDistance(null) << 4 ) - 8, maxRange ); // Paper - no-tick view distance
 
         for ( EntityHuman player : world.getPlayers() )
         {
 
+            final int perPlayerMaxRange = Math.min( ( ((net.minecraft.server.WorldServer)world).getChunkProvider().playerChunkMap.getEffectiveViewDistance(player instanceof EntityPlayer ? ((EntityPlayer) player).getBukkitEntity() : null) << 4 ) - 8, maxRange ); // Paper - no-tick view distance;
             player.activatedTick = MinecraftServer.currentTick;
-            maxBB = player.getBoundingBox().grow( maxRange, 256, maxRange );
+            maxBB = player.getBoundingBox().grow( perPlayerMaxRange, 256, perPlayerMaxRange );
             ActivationType.MISC.boundingBox = player.getBoundingBox().grow( miscActivationRange, 256, miscActivationRange );
             ActivationType.RAIDER.boundingBox = player.getBoundingBox().grow( raiderActivationRange, 256, raiderActivationRange );
             ActivationType.ANIMAL.boundingBox = player.getBoundingBox().grow( animalActivationRange, 256, animalActivationRange );
